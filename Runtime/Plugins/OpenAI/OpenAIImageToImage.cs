using OpenAI;
using OpenAI.Images;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using UnityEngine;

namespace XrAiAccelerator
{
    [XrAiProvider("OpenAI")]
    [XrAiOption("apiKey", XrAiOptionScope.Global, isRequired: true, description: "OpenAI API key for authentication")]
    public class OpenAIImageToImage : IXrAiImageToImage
    {
        private const string _PROMPT = "Complete the image.";
        private OpenAIClient _openAIClient;
        private XrAiOptionsHelper _optionsHelper;

        public Task Initialize(Dictionary<string, string> options = null)
        {
            _optionsHelper = new XrAiOptionsHelper(this, options);
            _openAIClient = new OpenAIClient(_optionsHelper.GetOption("apiKey"));
            return Task.CompletedTask;
        }

        public async Task Execute(Texture2D texture, Dictionary<string, string> options, Action<XrAiResult<Texture2D>> callback)
        {
            try
            {
                Texture2D rgbaTexture = ConvertToRGBA(texture);

                ImageEditRequest request = new(_PROMPT, texture);
                IReadOnlyList<ImageResult> result = await _openAIClient.ImagesEndPoint.CreateImageEditAsync(request);

                if (rgbaTexture != texture)
                {
                    UnityEngine.Object.DestroyImmediate(rgbaTexture);
                }

                callback?.Invoke(result.Count > 0
                    ? XrAiResult.Success(result[0].Texture)
                    : XrAiResult.Failure<Texture2D>("No images generated by OpenAI Text-to-Image."));
            }
            catch (Exception ex)
            {
                callback?.Invoke(
                    XrAiResult.Failure<Texture2D>($"Exception in OpenAIImageToImage: {ex.Message}")
                );
            }
        }

        private Texture2D ConvertToRGBA(Texture2D source)
        {
            if (source.format == TextureFormat.RGBA32)
            {
                return source;
            }

            if (!source.isReadable)
            {
                throw new ArgumentException("Source texture must be readable. Please enable 'Read/Write Enabled' in texture import settings.");
            }

            Texture2D rgbaTexture = new Texture2D(source.width, source.height, TextureFormat.RGBA32, false);

            Color[] pixels = source.GetPixels();
            rgbaTexture.SetPixels(pixels);
            rgbaTexture.Apply();

            return rgbaTexture;
        }

    }
}
