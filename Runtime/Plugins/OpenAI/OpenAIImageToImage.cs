using UnityEngine;
using OpenAI;
using OpenAI.Images;
using OpenAI.Models;
using System;
using System.Threading.Tasks;
using System.Collections.Generic;

namespace XrAiAccelerator
{
    #region Main Class
    public class OpenAIImageToImage : IXrAiImageToImage
    {
        private const string _PROMPT = "Complete the image.";
        private OpenAIClient _openAIClient;
        private Dictionary<string, string> _globalOptions = new();


        public OpenAIImageToImage(Dictionary<string, string> options)
        {
            _globalOptions = options;
            _openAIClient = new OpenAIClient(GetOption("apiKey"));
        }

        public async Task<XrAiResult<Texture2D>> Execute(Texture2D texture, Dictionary<string, string> options = null)
        {
            try {
                return await Execute(texture);
            }
            catch (Exception ex)
            {
                return XrAiResult.Failure<Texture2D>(ex.Message);
            }
        }

        private async Task<XrAiResult<Texture2D>> Execute(Texture2D texture)
        {
            try
            {
                // Convert texture to RGBA format if it's not already
                Texture2D rgbaTexture = ConvertToRGBA(texture);

                ImageEditRequest request = new(_PROMPT, rgbaTexture);
                IReadOnlyList<ImageResult> imageResults = await _openAIClient.ImagesEndPoint.CreateImageEditAsync(request);
                if (imageResults == null || imageResults.Count == 0)
                {
                    throw new Exception("No images generated by OpenAI Text-to-Image.");
                }

                if (rgbaTexture != texture)
                {
                    UnityEngine.Object.DestroyImmediate(rgbaTexture);
                }

                return XrAiResult.Success(imageResults[0].Texture);
            }
            catch (Exception ex)
            {
                return XrAiResult.Failure<Texture2D>(ex.Message);
            }
        }

        private Texture2D ConvertToRGBA(Texture2D source)
        {
            if (source.format == TextureFormat.RGBA32)
            {
                return source;
            }

            if (!source.isReadable)
            {
                throw new ArgumentException("Source texture must be readable. Please enable 'Read/Write Enabled' in texture import settings.");
            }

            Texture2D rgbaTexture = new Texture2D(source.width, source.height, TextureFormat.RGBA32, false);

            Color[] pixels = source.GetPixels();
            rgbaTexture.SetPixels(pixels);
            rgbaTexture.Apply();

            return rgbaTexture;
        }
        
        private string GetOption(string key, Dictionary<string, string> options = null)
        {
            if (options != null && options.TryGetValue(key, out string value))
            {
                return value;
            }
            else if (_globalOptions.TryGetValue(key, out value))
            {
                return value;
            }
            throw new KeyNotFoundException($"Option '{key}' not found.");
        }
    }
    #endregion
}
