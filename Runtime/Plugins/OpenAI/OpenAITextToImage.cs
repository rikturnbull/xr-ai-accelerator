using OpenAI;
using OpenAI.Images;
using OpenAI.Models;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using UnityEngine;

namespace XrAiAccelerator
{
    [XrAiProvider("OpenAI")]
    [XrAiOption("apiKey", XrAiOptionScope.Global, isRequired: true, description: "OpenAI API key for authentication")]
    [XrAiOption("prompt", XrAiOptionScope.Workflow, isRequired: true, defaultValue: "A cat wearing a VR headset", description: "The prompt to use for text-to-image conversion")]
    public class OpenAITextToImage : IXrAiTextToImage
    {
        private XrAiOptionsHelper _optionsHelper;
        private OpenAIClient _openAIClient;

        public Task Initialize(Dictionary<string, string> options = null)
        {
            _optionsHelper = new XrAiOptionsHelper(this, options);
            _openAIClient = new OpenAIClient(_optionsHelper.GetOption("apiKey"));
            return Task.CompletedTask;
        }

        public async Task Execute(Dictionary<string, string> options, Action<XrAiResult<Texture2D>> callback)
        {
            try
            {
                string prompt = _optionsHelper.GetOption("prompt", options);

                ImageGenerationRequest request = new(prompt, Model.DallE_3);
                IReadOnlyList<ImageResult> result = await _openAIClient.ImagesEndPoint.GenerateImageAsync(request);

                callback?.Invoke(result.Count > 0
                    ? XrAiResult.Success(result[0].Texture)
                    : XrAiResult.Failure<Texture2D>("No images generated by OpenAI Text-to-Image."));
            }
            catch (Exception ex)
            {
                callback?.Invoke(
                    XrAiResult.Failure<Texture2D>($"Exception in OpenAITextToImage: {ex.Message}")
                );
            }
        }
    }        
}
