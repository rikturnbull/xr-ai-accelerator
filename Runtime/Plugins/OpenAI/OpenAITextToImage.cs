using OpenAI;
using OpenAI.Images;
using OpenAI.Models;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading.Tasks;
using UnityEngine;

namespace XrAiAccelerator
{
    #region Main Class
    [XrAiProvider("OpenAI")]
    [XrAiOption("apiKey", XrAiOptionScope.Global, isRequired: true, description: "OpenAI API key for authentication")]
    [XrAiOption("prompt", XrAiOptionScope.Workflow, isRequired: true, defaultValue: "A cat wearing a VR headset", description: "The prompt to use for text-to-image conversion")]
    public class OpenAITextToImage : IXrAiTextToImage
    {
        private Dictionary<string, string> _globalOptions = new();
        private OpenAIClient _openAIClient;

        public Task Initialize(Dictionary<string, string> options = null, XrAiAssets assets = null)
        {
            _globalOptions = options ?? new Dictionary<string, string>();
            _openAIClient = new OpenAIClient(GetOption("apiKey"));
            return Task.CompletedTask;
        }

        public async Task Execute(Dictionary<string, string> options, Action<XrAiResult<Texture2D>> callback)
        {
            string prompt = GetOption("prompt", options);

            ImageGenerationRequest request = new(prompt, Model.DallE_3);
            IReadOnlyList<ImageResult> result = await _openAIClient.ImagesEndPoint.GenerateImageAsync(request);

            callback?.Invoke(result.Count > 0
                ? XrAiResult.Success(result[0].Texture)
                : XrAiResult.Failure<Texture2D>("No images generated by OpenAI Text-to-Image."));
        }

        private string GetOption(string key, Dictionary<string, string> options = null)
        {
            if (options != null && options.TryGetValue(key, out string value))
            {
                return value;
            }
            else if (_globalOptions.TryGetValue(key, out value))
            {
                return value;
            }
            throw new KeyNotFoundException($"Option '{key}' not found.");
        }
    }        
    #endregion
}
