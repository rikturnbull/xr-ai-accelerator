using UnityEngine;
using OpenAI;
using OpenAI.Images;
using OpenAI.Models;
using System;
using System.Threading.Tasks;
using System.Collections.Generic;

namespace XrAiOpenAI
{
    #region Main Class
    public class OpenAITextToImage : IXrAiTextToImage
    {
        private Dictionary<string, string> _globalOptions = new();
        private OpenAIClient _openAIClient;

        public OpenAITextToImage(Dictionary<string, string> options)
        {
            _globalOptions = options;
            _openAIClient = new OpenAIClient(GetOption("apiKey"));
        }

        public async Task<XrAiResult<Texture2D>> Execute(Dictionary<string, string> options = null)
        {
            try
            {
                string prompt = GetOption("prompt", options); 
                return await Execute(prompt);
            }
            catch (Exception ex)
            {
                return XrAiResult.Failure<Texture2D>(ex.Message);
            }
        }

        private async Task<XrAiResult<Texture2D>> Execute(string prompt)
        {
            ImageGenerationRequest request = new(prompt, Model.DallE_3);

            IReadOnlyList<ImageResult> imageResults = await _openAIClient.ImagesEndPoint.GenerateImageAsync(request);
            if (imageResults == null || imageResults.Count == 0)
            {
                return XrAiResult.Failure<Texture2D>("No images generated by OpenAI Text-to-Image.");
            }

            return XrAiResult.Success(imageResults[0].Texture);
        }
        
        private string GetOption(string key, Dictionary<string, string> options = null)
        {
            if (options != null && options.TryGetValue(key, out string value))
            {
                return value;
            }
            else if (_globalOptions.TryGetValue(key, out value))
            {
                return value;
            }
            throw new KeyNotFoundException($"Option '{key}' not found.");
        }
    }        
    #endregion
}
